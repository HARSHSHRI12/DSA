#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node*next;
    Node(int val){
        data=val;
        next=NULL;
    }
};
void Insertion(Node*&head, int val){
    Node*new_node=new Node(val);
        new_node->next=head;
        head=new_node;
    }
    void display(Node*head){
        Node*temp=head;
        while(temp!=NULL){
            cout<<temp->data<<"->";
            temp=temp->next;
        }
        cout<<"NULL"<<endl;;
    }
    void removemiddle(Node*head){
        if(head==NULL|| head->next==NULL){
            return;
        }
        Node*prev=NULL;
        Node*slow=head;
        Node*fast=head;
        while(fast!=NULL &&fast->next!=NULL){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        if(prev!=NULL){
            prev->next=slow->next;
            delete slow;
        }
    }
    void addmiddle(Node*head,int val){
        if(head==NULL){
            return;
        }
        Node*prev=NULL;
        Node*slow=head;
        Node*fast=head;
        while(fast!=NULL &&fast->next!=NULL){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        Node*new_node=new Node(val);
        if(prev!=NULL){
            prev->next=new_node;
            new_node->next=slow;
        }
    }
    

int main(){
    Node*head=NULL;
    Insertion(head, 2);
    Insertion(head, 4);
    Insertion(head, 5);
    Insertion(head, 6);
    Insertion(head, 7);
    Insertion(head, 9);
     Insertion(head, 17);
    Insertion(head, 29);
    
    display(head);
addmiddle(head,90);
display(head);
removemiddle(head);
display(head);

   
    return 0;
   
}
