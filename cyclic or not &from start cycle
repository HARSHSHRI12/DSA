#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

void insertion(Node*& head, int val) {
    Node* new_node = new Node(val);
    new_node->next = head;
    head = new_node;
}

void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL" << endl; // End with newline for clarity
}

Node* detectCycle(Node* head) {
    Node* fast = head;
    Node* slow = head;

    while (fast != nullptr && fast->next != nullptr) {
        fast = fast->next->next;
        slow = slow->next;

        if (slow == fast) { // Cycle detected
            return slow; // Return the meeting point
        }
    }

    return nullptr; // No cycle detected
}

int findCycleStart(Node* head) {
    Node* meet = detectCycle(head); // Get the meeting point
    if (meet == nullptr) { // No cycle
        return -1; // Indicate no cycle
    }

    Node* start = head;
    while (start != meet) {
        start = start->next;
        meet = meet->next;
    }

    return start->data; // The starting node of the cycle
}

int main() {
    Node* head = nullptr;
    insertion(head, 2);
    insertion(head, 4);
    insertion(head, 5);
    insertion(head, 6);
    insertion(head, 7);
    insertion(head, 9);
    insertion(head, 17);
    insertion(head, 29);

    display(head);

    Node* meetingPoint = detectCycle(head);

    if (meetingPoint != nullptr) {
        cout << "Linked list is cyclic." << endl;

        int cycleStart = findCycleStart(head); // Get cycle's starting point
        cout << "Cycle starts at node with data: " << cycleStart << endl; // Display the starting point
    } else {
        cout << "Linked list is not cyclic." << endl;
    }

    return 0;
}
